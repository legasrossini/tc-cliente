name: Deploy EC2 with Terraform

on:
  push:
    branches:
      - main

jobs:
  terraform:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up JDK
        uses: actions/setup-java@v2
        with:
          distribution: 'adopt'
          java-version: '17'

      - name: Build with Maven
        id: build
        run: |
          mvn clean package
          echo "JAR_PATH=$(find target -name '*.jar')" >> $GITHUB_ENV

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v1

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Terraform Init
        run: terraform init
        working-directory: ./infra

      - name: Terraform Validate
        run: terraform validate
        working-directory: ./infra

      - name: Terraform Apply
        id: terraform_apply
        run: |
          terraform apply -var="aws_access_key=${{ secrets.AWS_ACCESS_KEY_ID }}" -var="aws_secret_key=${{ secrets.AWS_SECRET_ACCESS_KEY }}" -auto-approve
          instance_ip=$(terraform output -raw instance_public_ip | tr -d '[:space:]')
          
          # Verificar se o valor capturado é um IP válido
          if [[ "$instance_ip" =~ ^[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "instance_public_ip=$instance_ip" >> $GITHUB_ENV
          else
            echo "Error: Invalid instance_public_ip: $instance_ip" >&2
            exit 1
          fi
        working-directory: ./infra

      - name: Export Private Key
        run: |
          sudo terraform output -raw private_key_pem > $HOME/deployer_key.pem
        working-directory: ./infra

      - name: Deploy Application
        run: |
          instance_ip=${{ env.instance_public_ip }}
          KEY_PATH="$HOME/deployer_key.pem"
          JAR_PATH="${{ env.JAR_PATH }}"

          # Verifique se o arquivo de chave privada existe
          if [ ! -f "$KEY_PATH" ]; then
            echo "Erro: Arquivo de chave privada não encontrado em $KEY_PATH."
            exit 1
          fi

          # Copie o JAR para a instância EC2
          scp -o "StrictHostKeyChecking=no" $JAR_PATH ec2-user@$instance_ip:/path/to/cliente-1.0-SNAPSHOT.jar

          # Conecte-se à instância via SSH e execute o comando
          ssh -tt -o "StrictHostKeyChecking=no" -i "$KEY_PATH" ec2-user@$instance_ip << 'EOF'
          export AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}
          export AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}
          export AWS_REGION=${{ secrets.AWS_REGION }}

          # Verifique se o arquivo JAR existe
          if [ ! -f "/path/to/cliente-1.0-SNAPSHOT.jar" ]; then
            echo "Erro: Arquivo JAR não encontrado em /path/to/cliente-1.0-SNAPSHOT.jar."
            exit 1
          fi

          # Inicie a aplicação
          nohup java -jar /path/to/cliente-1.0-SNAPSHOT.jar > /dev/null 2>&1 &
          EOF
        shell: bash
        env:
          AWS_DEFAULT_REGION: ${{ secrets.AWS_REGION }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}