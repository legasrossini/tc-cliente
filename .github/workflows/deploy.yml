name: Deploy EC2 with Terraform

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v1

      - name: Configure AWS credentials
        run: |
          export AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}
          export AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}
          export AWS_REGION=${{ secrets.AWS_REGION }}

      - name: Terraform Init
        run: terraform init
        working-directory: ./infra

      - name: Terraform Apply
        id: terraform_apply
        run: |
          terraform apply -auto-approve
          
          # Obter o IP público e o nome do bucket
          INSTANCE_IP=$(terraform output -raw instance_public_ip)
          S3_BUCKET=$(terraform output -raw s3_bucket_name)

          echo "INSTANCE_IP=$INSTANCE_IP" >> $GITHUB_ENV
          echo "S3_BUCKET=$S3_BUCKET" >> $GITHUB_ENV
        working-directory: ./infra

      - name: Export Private Key
        run: |
          terraform output -raw private_key_pem > $HOME/deployer_key.pem
          chmod 600 $HOME/deployer_key.pem
        working-directory: ./infra

      - name: Wait for SSH to be available
        run: |
          INSTANCE_IP="${{ env.INSTANCE_IP }}"
          echo "Aguardando a instância estar acessível via SSH..."
          for i in {1..30}; do
            nc -zv $INSTANCE_IP 22 && break
            echo "Tentativa $i: Porta 22 ainda não está acessível. Aguardando 10 segundos..."
            sleep 10
          done
          if ! nc -zv $INSTANCE_IP 22; then
            echo "Erro: Porta 22 não está acessível após várias tentativas."
            exit 1
          fi

      - name: Set up JDK
        uses: actions/setup-java@v2
        with:
          distribution: 'adopt'
          java-version: '17'

      - name: Build with Maven
        id: build
        run: |
          mvn clean package
          JAR_PATH=$(find target -name '*.jar')
          if [ -z "$JAR_PATH" ]; then
            echo "Erro: Nenhum arquivo JAR encontrado após a build."
            exit 1
          fi
          echo "JAR_PATH=$JAR_PATH" >> $GITHUB_ENV
          echo "Caminho do JAR: $JAR_PATH"

      - name: Upload JAR to S3
        run: |
          JAR_PATH="${{ env.JAR_PATH }}"
          S3_BUCKET="${{ env.S3_BUCKET }}"

          echo "Fazendo upload do JAR para o bucket S3..."
          aws s3 cp "$JAR_PATH" "s3://$S3_BUCKET/cliente-1.0-SNAPSHOT.jar"
          echo "Upload concluído com sucesso."

      - name: Deploy Application
        run: |
          INSTANCE_IP="${{ env.INSTANCE_IP }}"
          S3_BUCKET="${{ env.S3_BUCKET }}"
          KEY_PATH="$HOME/deployer_key.pem"

          echo "Iniciando deploy da aplicação..."
          ssh -tt -o "StrictHostKeyChecking=no" -i "$KEY_PATH" ec2-user@$INSTANCE_IP << EOF
          echo "Baixando o arquivo JAR do S3..."
          aws s3 cp "s3://$S3_BUCKET/cliente-1.0-SNAPSHOT.jar" /home/ec2-user/cliente-1.0-SNAPSHOT.jar

          if [ ! -f "/home/ec2-user/cliente-1.0-SNAPSHOT.jar" ]; then
            echo "Erro: Arquivo JAR não encontrado."
            exit 1
          fi

          # Iniciar a aplicação
          nohup java -jar /home/ec2-user/cliente-1.0-SNAPSHOT.jar > /home/ec2-user/app.log 2>&1 &
          echo "Aplicação iniciada com sucesso. Logs disponíveis em /home/ec2-user/app.log"
          EOF
